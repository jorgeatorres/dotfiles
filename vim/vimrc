" vim:set ts=2 sts=2 sw=2 expandtab:

set nocompatible
filetype off

" Plugins
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
  Plugin 'gmarik/Vundle.vim'
  Plugin 'rking/ag.vim'
  Plugin 'ctrlpvim/ctrlp.vim'
  Plugin 'JazzCore/ctrlp-cmatcher'
  Plugin 'tacahiroy/ctrlp-funky'
  Plugin 'Raimondi/delimitMate'
  Plugin 'henrik/vim-reveal-in-finder'
  Plugin 'tpope/vim-eunuch'
  Plugin 'shawncplus/phpcomplete.vim'
  Plugin 'vim-scripts/matchit.zip'
  Plugin 'tpope/vim-surround' "ds, cs, yss
  Plugin 'skwp/greplace.vim'
  Plugin 'tomtom/tcomment_vim' "gcc, gc{motion}
  Plugin 'groenewege/vim-less'
  Plugin 'pbrisbin/vim-mkdir' "Automatically create non-existent directories when saving.
  Plugin 'tpope/vim-fugitive'
  Plugin 'NLKNguyen/papercolor-theme'
call vundle#end()

filetype plugin on
syntax on
"set omnifunc=syntaxcomplete#Complete

" ----------------------
" 1) General Preferences
" ----------------------

set autoread hidden nobackup nowritebackup noswapfile modeline
set ffs=unix,dos,mac enc=utf-8 fenc=utf-8
set clipboard=unnamed
set report=0
set shortmess=aAI
set incsearch
set relativenumber number

" Use visual bells instead of sound.
set vb
"set v_vb=                       " Turn off sound.

" Cursor keys move to prev/next lines too.
set whichwrap+=<,>,[,]

" Default to replacing all ocurrences when searching & replacing.
set gdefault

" Ignore case when searching, except if not all pattern is lowercase.
set ignorecase smartcase

" Show matching brackets.
set showmatch

" Display trailing whitespace as errors.
match ErrorMsg '\s\+$'

set statusline=\ [%{mode()}]\ %.80f\ %h%m%r%w%=\|\%{strlen(&ft)?&ft:'?'}\ \|\%{strlen(&fenc)?&fenc:&enc}\ (%{&fileformat})\|\ %-8(%l:%c%)

" Last line: don't show current mode + show incomplete commands.
set noshowmode showcmd

" Always show status line.
set laststatus=2

set cursorline
set colorcolumn=0

set foldmethod=indent foldlevel=99 foldnestmax=4

" Always show 3 lines of context around the cursor.
set scrolloff=3


"-----------
" 2) Editing
"-----------

set nostartofline

set nowrap
set textwidth=120

set autoindent smartindent copyindent
set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab smarttab

" Recognize numbered lists.
set formatoptions+=n

" Do not break lines at textwidth col.
set formatoptions-=t

" Backspace over everything.
set backspace=indent,eol,start

" When editing a file, always jump to the last cursor position.
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Autocomplete.
set completeopt=menu,longest,menuone

" Use wild menu for tab-completion.
set wildmenu
set wildmode=longest:full

set wildignore+=.DS_Store,*/node_modules/*,*/vendors/*,*/.site/*,*.min.css,*.min.js,*.mo
set wildignore+=*/_vvv/*

" ---------------------------
" 3) Filetype-specific config
" ---------------------------
"
au FileType php setl omnifunc=phpcomplete#CompletePHP makeprg=php\ %
au FileType python setl omnifunc=pythoncomplete#Complete makeprg=python\ %
au FileType ruby setl makeprg=ruby\ %

"----------------
" 4) Key bindings
"----------------

let mapleader = ","
noremap Q <nop>

" A more clever navigation.
nnoremap j gj
nnoremap k gk

" Visual shifting.
vnoremap < <gv
vnoremap > >gv

" Remap space bar to search.
:nmap <Space> /

imap jj <Esc>

" Navigate through buffers using Ctrl-Tab and Ctrl-Shift-Tab
map <C-Tab> :bn<CR>
map <C-S-Tab> :bp<CR>

" Ctrl + Space for omnifunc automcplete.
imap <C-Space> <C-X><C-O>


" Typing %% expands to the path of the current file.
cmap %% <C-R>=expand("%:h") . "/" <CR>

"-----------
" 5) Plugins
"-----------

let g:tcommentGuessFileType_php=1

let delimitMate_expand_space=1

" Use treeview for NetRW by default.
let g:netrw_liststyle=3

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0

  " File search (AG Silver Searcher).
  map <Leader>fs :Ag!<Space>''<Left>
endif

" ctrlp.vim.
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_max_height = 15
let g:ctrlp_show_hidden = 0
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:ctrlp_max_files = 0
let g:ctrlp_map = ''
let g:ctrlp_extensions = ['funky']
let g:ctrlp_open_multiple_files = 'ij'
let g:ctrlp_use_caching = 0

" --------
" 6) Misc.
" --------

" Command to remove trailing spaces.
command! RemoveTrailingSpaces :%s/\s\+$//e

