" vim:set ts=2 sts=2 sw=2 expandtab:

set nocompatible
filetype off

if !filereadable(expand('~/.vim/autoload/plug.vim'))
  exec 'silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs '.
        \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

" Plugins
call plug#begin('~/.vim/plugged')
  Plug 'mileszs/ack.vim'
  Plug 'dyng/ctrlsf.vim'

  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'FelikZ/ctrlp-py-matcher'
  Plug 'tacahiroy/ctrlp-funky'

  Plug 'Raimondi/delimitMate' " Provides insert mode auto-completion for quotes, parens, brackets, etc.
  "Plug 'ntpeters/vim-better-whitespace' "Causes all trailing whitespace characters to be highlighted. Also provides :StripWhitespace.
  Plug 'tpope/vim-surround' "ds, cs, yss
  Plug 'tomtom/tcomment_vim' "gcc, gc{motion}

  Plug 'tpope/vim-sleuth' "Heuristically set buffer options (shiftwidth, expandtab, etc.).
  Plug 'henrik/vim-reveal-in-finder' "Reveal the current file in the OS X Finder. Use with :Reveal.
  Plug 'tpope/vim-eunuch'
  Plug 'shawncplus/phpcomplete.vim' "Improved PHP omnicompletion
  Plug 'vim-scripts/matchit.zip' "Extended % matching for HTML, LaTeX, and many other languages.
  Plug 'groenewege/vim-less' "Syntax support for LESS.
  Plug 'pbrisbin/vim-mkdir' "Automatically create non-existent directories when saving.
  Plug 'tpope/vim-fugitive' "Git support.
  Plug 'moll/vim-bbye' "Delete buffers and close files in Vim without closing your windows. Use with :Bdelete and :Bwipeout.

  Plug 'ludovicchabant/vim-gutentags' " A Vim plugin that manages your tag files
  Plug 'majutsushi/tagbar' " Vim plugin that displays tags in a window, ordered by scope. Use with :TagbarToggle.

  Plug 'terryma/vim-multiple-cursors'
  Plug 'skwp/greplace.vim'

  Plug 'tpope/vim-repeat'
  Plug 'sjl/gundo.vim'
  Plug 'thinca/vim-quickrun'

  Plug 'chriskempson/base16-vim'
call plug#end()

" ----------------------
" 1) General Preferences
" ----------------------

filetype plugin indent on
syntax on
"set omnifunc=syntaxcomplete#Complete

set autoread hidden nobackup nowritebackup noswapfile modeline
set ffs=unix,dos,mac enc=utf-8 fenc=utf-8
set clipboard=unnamed
set report=0
set shortmess=aAI
set incsearch
set relativenumber number
set viminfo='100,<100,s10,h


" Use visual bells instead of sound.
set noerrorbells
set vb t_vb=

" Cursor keys move to prev/next lines too.
set whichwrap+=<,>,[,]

" Default to replacing all ocurrences when searching & replacing.
set gdefault

" Ignore case when searching, except if not all pattern is lowercase.
set ignorecase smartcase

" Show matching brackets.
set showmatch

" Custom status line
set statusline=\ [%{mode()}]\ %.80f\ %h%m%r%w%=\|\%{strlen(&ft)?&ft:'?'}\ \|\%{strlen(&fenc)?&fenc:&enc}\ (%{&fileformat})\|\ %-8(%l:%c%)

" Last line: don't show current mode + show incomplete commands.
set noshowmode showcmd

" Always show status line.
set laststatus=2

set cursorline
" set colorcolumn=+1

set foldmethod=indent foldlevel=99 foldnestmax=4

" Always show some lines of context around the cursor.
set scrolloff=5

set listchars=tab:\›\ ,trail:·
set list

" set noeol nofixeol

"-----------
" 2) Editing
"-----------

set nostartofline

set nowrap
set textwidth=120

set autoindent smartindent copyindent
set tabstop=4 softtabstop=0 shiftwidth=4
set expandtab smarttab

" Recognize numbered lists.
set formatoptions+=n

" Do not break lines at textwidth col.
set formatoptions-=t

" Backspace over everything.
set backspace=indent,eol,start

" When editing a file, always jump to the last cursor position.
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Autocomplete.
set completeopt=menu,longest,menuone

" Use wild menu for tab-completion.
set wildmenu
set wildmode=longest:full
set wildignore+=.DS_Store,*/node_modules/*,*/vendors/*,*/.site/*,*.min.css,*.min.js,*.mo

" set wildignore+=*/_vvv/*

" ---------------------------
" 3) Filetype-specific config
" ---------------------------
"
au FileType php setl omnifunc=phpcomplete#CompletePHP makeprg=php\ %
au FileType php setl makeprg=php\ %
au FileType python setl omnifunc=pythoncomplete#Complete makeprg=python\ %
au FileType ruby setl makeprg=ruby\ %

"----------------
" 4) Key bindings
"----------------

let mapleader = ","
noremap Q <nop>

" A more clever navigation.
nnoremap j gj
nnoremap k gk

" Visual shifting.
vnoremap < <gv
vnoremap > >gv

" Remap space bar to search.
:nmap <Space> /

imap jj <Esc>

" Navigate through buffers using Ctrl-Tab and Ctrl-Shift-Tab
map <C-Tab> :bn<CR>
map <C-S-Tab> :bp<CR>

" Ctrl + Space for omnifunc automcplete.
imap <C-Space> <C-X><C-O>


" Typing %% expands to the path of the current file.
cmap %% <C-R>=expand("%:h") . "/" <CR>

" Quicker window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Fugitive git status
nnoremap <silent> gss :Gstatus<CR>

"-----------
" 5) Plugins
"-----------

let g:tcomment#filetype#guess_php=1

let delimitMate_expand_space=1

" Use treeview for NetRW by default.
let g:netrw_liststyle=3


" Project-wide search.
nnoremap <Leader>a :Ack!<Space>''<Left>
nnoremap <Leader>A :Ack! <cword><CR>


if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  let g:ackprg = 'rg --vimgrep --ignore-vcs --no-heading --smart-case --iglob !node_modules/ --iglob !.git/ --iglob !.DS_Store --iglob !vendor/ --iglob !tmp/'
  let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob "" --no-ignore-vcs --iglob !.git/ --iglob !node_modules/ --iglob !.DS_Store --iglob !vendor/ --iglob !tmp/'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep --skip-vcs-ignores --ignore node_modules/ --ignore .git --ignore .DS_Store --ignore vendor/ --ignore tmp/'
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden --skip-vcs-ignores --ignore node_modules --ignore .git --ignore .DS_Store --ignore vendor/ --ignore tmp/ -g ""'
  let g:ctrlp_use_caching = 0
endif

" ctrlp.vim.
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:15'
let g:ctrlp_show_hidden = 0
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_max_files = 0
let g:ctrlp_map = '<Leader>o'
let g:ctrlp_extensions = ['funky']
let g:ctrlp_open_multiple_files = 'ij'
let g:ctrlp_working_path_mode = ''

let g:ctrlsf_auto_close = 0
let g:ctrlsf_position = 'bottom'
" let g:ctrlsf_winsize = '200'

let g:phpcomplete_mappings = {
   \ 'jump_to_def': '<C-]>',
   \ 'jump_to_def_split': '',
   \ 'jump_to_def_vsplit': '',
   \ 'jump_to_def_tabnew': '',
   \}

" --------
" 6) Misc.
" --------

" Command to remove trailing spaces.
" command! RemoveTrailingSpaces :%s/\s\+$//e
"

if has("gui_running")
  set guicursor=a:blinkon0
  set guioptions=ceig
endif
